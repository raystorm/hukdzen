type DocumentDetails @model @searchable @auth(rules: [{ allow: private,
                                              operations: [create, update, delete, read] }])
{
   id: ID!

   eng_title:       String!
   eng_description: String!

   #author:     Gyet!        @hasOne
   author:      Author!      @hasOne
   docOwner:    User!        @hasOne

   # filePath:    AWSURL!      #unsecure, temp, long,
   fileKey:     String!      #AWS Bucket File Key, like a file path

   created:     AWSDateTime!
   updated:     AWSDateTime

   type:        String       # image, word doc, etc., needs, an enum list
   version:     Float!

   box:         Xbiis!       @hasOne #Box the Document Item Belongs to.

   #bc: LangFields! @hasOne
   #ak: LangFields! @hasOne
   bc_title:       String!
   bc_description: String!

   ak_title:       String!
   ak_description: String!

   #Search Keywords
   keywords: [String] #should default to keywords type in OpenSearch
}

interface Gyet
{
   id:       ID!
   name:     String!
   clan:     Clan # @hasOne
   waa:      String # smalgyax name
   email:    AWSEmail
}

type Author implements Gyet @model @auth(rules: [{ allow: private,
                                                   operations: [create, update, delete, read] }])
{
   id:       ID!
   name:     String!
   clan:     Clan
   waa:      String
   email:    AWSEmail
}

#TODO: more, consider more levels, like ADMIN, etc.
enum AccessLevel {
   NONE
   READ
   WRITE
}

#TODO: in clanTypes work on conversions
enum Clan {
   GANHADA     # RAVEN
   LAXSGIIK    # EAGLE
   GITSBUTWADA # KILLERWHALE (ORCA)
   LAXGIBU     # WOLF
}

type Xbiis @model @auth(rules: [{ allow: private,
                                  operations: [create, update, delete, read] }])
{
   id:          ID!
   name:        String!
   waa:         String
   owner:       User!       @hasOne
   defaultRole: AccessLevel
}

#type BoxRole @model @auth(rules: [{ allow: private }])
#{
#   box:  Xbiis!       @hasOne
#   role: AccessLevel!
#}

type User implements Gyet @model @auth(rules: [{ allow: private,
                                                 operations: [create, update, delete, read] }])
{
   id:       ID!
   name:     String!
   clan:     Clan
   waa:      String
   email:    AWSEmail!
   isAdmin:  Boolean
}

type BoxUser @model @auth(rules: [{ allow: private,
                                    operations: [create, update, delete, read] }])
{
   id:   ID!
   user: User!        @hasOne
   # boxRole: BoxRole!  @hasOne
   box:  Xbiis!       @hasOne
   role: AccessLevel!
}