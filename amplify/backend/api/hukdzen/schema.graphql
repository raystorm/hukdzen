# This "input" configures a global authorization rule
# to enable public access to all models in this schema.
# Learn more about authorization rules here:
# https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

#TODO: swap public for authenticated
#type LangFields @model @auth(rules: [{ allow: owner },
#                                     { allow: groups, groups: ["WebAppAdmin"],
#                                       operations: [create, update, read, delete] },
#                                     { allow: public, operations: [read] }])
#{
#  title:       String!
#  description: String!
#}

type DocumentDetails @model @auth(rules: [{ allow: owner },
                                          { allow: groups, groups: ["WebAppAdmin"],
                                            operations: [create, update, read, delete] },
                                          { allow: public, operations: [read] }])
{
  id: ID!

  eng_title:       String!
  eng_description: String!

  author:      Gyet!        @hasOne
  docOwner:    Gyet!        @hasOne

  # filePath:    AWSURL!      #unsecure, temp, long,
  fileKey:     String!      #AWS Bucket File Key, like a file path

  created:     AWSDateTime!
  updated:     AWSDateTime

  type:        String       # image, word doc, etc., needs, an enum list
  version:     Float!

   box:         Xbiis!       @hasOne #Box the Document Item Belongs to.

   #bc: LangFields! @hasOne
   #ak: LangFields! @hasOne
   bc_title:       String!
   bc_description: String!

   ak_title:       String!
   ak_description: String!
}

#TODO: more, consider more levels, like ADMIN, etc.
enum AccessLevel {
   READ
   WRITE
}

type Xbiis @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                  operations: [create, update, read, delete] },
                                { allow: public, operations: [read] }])
{
   id:          ID!
   name:        String!
   owner:       Gyet!       @hasOne
   defaultRole: AccessLevel
}

type BoxRole @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                    operations: [create, update, read, delete] },
                                  { allow: public, operations: [read] }])
{
   box: Xbiis!
   role: AccessLevel!
}

type ClanType @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                     operations: [create, update, read, delete] },
                                   { allow: public, operations: [read] }])
{
   name:     String! @primaryKey
   smalgyax: String! @index
}

type Gyet @model @auth(rules: [{ allow: owner },
                               { allow: groups, groups: ["WebAppAdmin"],
                                 operations: [create, update, read, delete] },
                               { allow: public, operations: [read] }])
{
   id:        ID!
   name:      String!
   email:     AWSEmail!
   clan:      ClanType
   waa:       String # smalgyax name
   isAdmin:   Boolean
   boxRoles:  [BoxRole] @hasMany
}