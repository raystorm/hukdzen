# This "input" configures a global authorization rule
# to enable public access to all models in this schema.
# Learn more about authorization rules here:
# https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

#type Task @model
#    @auth(rules: [
#        { allow: groups, groups: ["Managers"],
#          operations: [create, update, read, delete] }
#        { allow: groups, groups: ["Employees"], operations: [read] }
#      ]
#    )
#{
#  id: ID!
#  title: String!
#  description: String
#  status: String
#}
#
#type PrivateNote @model @auth(rules: [{ allow: owner }])
#{
#  id: ID!
#  content: String!
#}

#TODO: swap public for authenticated
type LangFields @model @auth(rules: [{ allow: owner },
                                     { allow: groups, groups: ["WebAppAdmin"],
                                       operations: [create, update, read, delete] },
                                     { allow: public, operations: [read] }])
{
  title:       String!
  description: String!
}

type DocumentDetails @model @auth(rules: [{ allow: owner },
                                          { allow: groups, groups: ["WebAppAdmin"],
                                            operations: [create, update, read, delete] },
                                          { allow: public, operations: [read] }])
{
  id: ID!

  title:       String!
  description: String!
  authorId:    Gyet!  #TODO: link to user object
  ownerId:     Gyet!  #TODO: link to user object
  filePath:    AWSURL!
  created:     AWSDateTime!
  updated:     AWSDateTime
  type:        String   # image, word doc, etc., needs, an enum list
  version:     Float!
  box:         Xbiis!   #Box the Document Item Belongs to.

  bc: LangFields!
  ak: LangFields!
}

type RoleType @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                     operations: [create, update, read, delete] },
                                     { allow: public, operations: [read] }])
{
   name:  String!
   # TODO: consider a Smalgyax Name as well as an English one
   read:  Boolean!
   write: Boolean!
}

type Xbiis @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                  operations: [create, update, read, delete] },
                                { allow: public, operations: [read] }])
{
   id:          ID!
   name:        String!
   owner:       Gyet!
   defaultRole: RoleType
}

type BoxRole @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                    operations: [create, update, read, delete] },
                                  { allow: public, operations: [read] }])
{
   box: Xbiis!
   role: RoleType!
}

type ClanType @model @auth(rules: [{ allow: groups, groups: ["WebAppAdmin"],
                                     operations: [create, update, read, delete] },
                                   { allow: public, operations: [read] }])
{
   name: String!     @primaryKey
   smalgyax: String! @index
}

type Gyet @model @auth(rules: [{ allow: owner },
                               { allow: groups, groups: ["WebAppAdmin"],
                                 operations: [create, update, read, delete] },
                               { allow: public, operations: [read] }])
{
   id:        ID!
   name:      String!
   email:     AWSEmail!
   clan:      ClanType
   waa:       String # smalgyax name
   isAdmin:   Boolean
   boxRoles:  [BoxRole]
}