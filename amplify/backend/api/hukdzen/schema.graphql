type DocumentDetails @model  @auth(rules: [{ allow: private }])
{
  id: ID!

  eng_title:       String!
  eng_description: String!

  author:      Gyet!        @hasOne
  docOwner:    Gyet!        @hasOne

  # filePath:    AWSURL!      #unsecure, temp, long,
  fileKey:     String!      #AWS Bucket File Key, like a file path

  created:     AWSDateTime!
  updated:     AWSDateTime

  type:        String       # image, word doc, etc., needs, an enum list
  version:     Float!

   box:         Xbiis!       @hasOne #Box the Document Item Belongs to.

   #bc: LangFields! @hasOne
   #ak: LangFields! @hasOne
   bc_title:       String!
   bc_description: String!

   ak_title:       String!
   ak_description: String!
}

#TODO: more, consider more levels, like ADMIN, etc.
enum AccessLevel {
   READ
   WRITE
}

type Xbiis @model @auth(rules: [{ allow: private }])
{
   id:          ID!
   name:        String!
   owner:       Gyet!       @hasOne
   defaultRole: AccessLevel
}

type BoxRole @model @auth(rules: [{ allow: private }])
{
   box:  Xbiis!       @hasOne
   role: AccessLevel!
}

type ClanType @model @auth(rules: [{ allow: private }])
{
   name:     String! @primaryKey
   smalgyax: String! @index
}

type Gyet @model @auth(rules: [{ allow: private }])
{
   id:       ID!
   name:     String!
   email:    AWSEmail!
   clan:     ClanType
   waa:      String # smalgyax name
   isAdmin:  Boolean
   #TODO: Remove BoxRoles, create new Member Object instead
   #boxRoles: [BoxRole] @hasMany
}

type BoxUser @model @auth(rules: [{ allow: private }])
{
   id:      ID!
   user:    Gyet!    @hasOne
   boxRole: BoxRole! @hasOne
}