//type TranslationMap = { [key: string]: string };

// noinspection JSNonASCIINames
/**
 *  Character Map with Alaskan Key to BC Orthography mapping
 *  @private
 */
const alaskanToBCMap= {
   'ai'  : 'ee',  'Ai'  : 'Ee',
   'ee'  : 'ii',  'Ee'  : 'Ii',
   'ie'  : 'ay',  'Ie'  : 'Ay',
   'oa'  : 'oo',  'Oa'  : 'Oo',
   'oo'  : 'uu',  'Oo'  : 'Uu',
   'uu'  : 'ü',   'Uu'  : 'Ü',
   'ck'  : 'x',   'Ck'  : 'C',
   'ds'  : 'dz',  'Ds'  : 'Dz',
   'gg'  : 'g̱',   'Gg'  : 'G̱',
   'hl'  : 'ł',   'Hl'  : 'Ł',
   'sh'  : 's',   'Sh'  : 'S',
   "'b"  : "p'",  "'B"  : "P'",
   "'d"  : "t'",  "'D"  : "T'",
   "'ds" : "ts'", "'Ds" : "Ts'",
   "'k"  : "k'",  "'K"  : "K'",
   "'kw" : "k'w", "'Kw" : "K'w",
   "'ky" : "k'y", "'Ky" : "K'y",
};

// noinspection JSNonASCIINames
/**
 *  Character Map with BC Key to Alaskan Orthography mapping
 *  @private
 */
const bCToAlaskanMap = {
   'ee'  : 'ai',  'Ee'  : 'Ai',
   'ii'  : 'ee',  'Ii'  : 'Ee',
   'ay'  : 'ie',  'Ay'  : 'Ie',
   'oo'  : 'oa',  'Oo'  : 'Oa',
   'uu'  : 'oo',  'Uu'  : 'Oo',
   'ü'   : 'uu',  'Ü'   : 'Uu',
   'x'   : 'ck',  'X'   : 'Ck',
   'dz'  : 'ds',  'Dz'  : 'Ds',
   'g̱'   : 'gg',  'G̱'   : 'Gg',
   'ł'   : 'hl',  'Ł'   : 'Hl',
   's'   : 'sh',  'S'   : 'Sh',
   "p'"  : "'b",  "P'"  : "'B",
   "t'"  : "'d",  "T'"  : "'D",
   "ts'" : "'ds", "Ts'" : "'Ds",
   "k'"  : "'k",  "K'"  : "'K",
   "k'w" : "'kw", "K'w" : "'Kw",
   "k'y" : "'ky", "K'y" : "'Ky",
};

/**
 *   Class for Translating between Orthographies
 *   Based on a Skeleton Generated by Bing. (Chat GPT-4)
 */
class Translator
{

   alaskanToBC() { return alaskanToBCMap; }


   bCToAlaskan()  { return bCToAlaskanMap; }

   translateToBC(text) { return this.translate(text, alaskanToBCMap); }

   translateToAlaskan(text) { return this.translate(text, bCToAlaskanMap); }

   translate(text, translationMap)
   {
      let translatedText = text;
      for (const key in translationMap)
      {
         const value = translationMap[key];
         const regex = new RegExp(key, "g");
         translatedText = translatedText.replace(regex, value);
      }
      return translatedText;
   }
}

//export default Translator;
module.exports = Translator;

/* TEST && usage example
const Translator = new Translator();
const bcText = Translator.translateToBC("Your Alaskan text here");
const alaskanText = Translator.translateToAlaskan("Your BC text here");
// end TEST && usage example */